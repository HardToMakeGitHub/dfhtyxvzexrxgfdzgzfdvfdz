repeat wait() until game:IsLoaded()
loadstring(game:HttpGet("https://raw.githubusercontent.com/banbuskox/dfhtyxvzexrxgfdzgzfdvfdz/main/ikcxujvkdsStrat"))()
local scrip = {}
local RS = game:WaitForChild('ReplicatedStorage')
local RSRF = RS:WaitForChild("RemoteFunction")
local RSRE = RS:WaitForChild("RemoteEvent")
function isgame()
    if game.PlaceId == 5591597781 then
        return true
    else
        return false
    end
end
function place(troop,pos)
    if isgame() then
    local args = {
        [1] = "Troops",
        [2] = "Place",
        [3] = troop,
        [4] = {
            ["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),
            ["Position"] = pos
        }
    }
    RSRF:InvokeServer(unpack(args))
    end
end
function sell(troop)
    if isgame() then
    local args = {
        [1] = "Troops",
        [2] = "Sell",
        [3] = {
            ["Troop"] = game.Workspace.Towers[tostring(troop)],
        }
    }
    RSRF:InvokeServer(unpack(args))
    end
end
function upgrade(troop)
    if isgame() then
    local args = {
        [1] = "Troops",
        [2] = "Upgrade",
        [3] = "Set",
        [4] = {
            ["Troop"] = game.Workspace.Towers[tostring(troop)],
        }
    }
    RSRF:InvokeServer(unpack(args))
    end
end
function EquipTroop(troop)
    if not isgame() then
    local args = {
        [1] = "Inventory",
        [2] = "Execute",
        [3] = "Troops",
        [4] = "Add",
        [5] = {
            ["Name"] = troop
        }
    }
    RSRE:FireServer(unpack(args))
    end
    end
function skip()
    if isgame() then
    local args = {
        [1] = "Waves",
        [2] = "Skip"
    }
    RSRF:InvokeServer(unpack(args))
    end
end
function conv(times,timem)
    local seconds = times
    local cnv = timem * 60
    seconds = seconds + cnv
    return seconds
end
function scrip:Map(map,antimulti)
if not isgame() then
    getgenv().repeating = true
    while wait(1) do
        if getgenv().repeating then
        getgenv().repeating = false
        local jc = 0
        for _,Elevators in pairs(game:GetService('Workspace').Elevators:GetChildren()) do
                        local sc = Elevators.Screen.SurfaceGui.Status.Players
                        local mp = Elevators.State.Map.Title
                        local rq = require(Elevators.Settings).Type
                        if mp.Value == map then
                        if sc.Text == "0/4" then
                            jc = jc + 1
                            print("Join attempt...")
                            local args = {
                                    [1] = "Elevators",
                                    [2] = "Enter",
                                    [3] = Elevators
                            }
                            RSRF:InvokeServer(unpack(args))
                            print("Joined elavator...")
                        while wait(1) do
                        if mp.Value == map then
                        if antimulti then
                        if sc.Text == "2/4" or sc.Text == "3/4" or sc.Text == "4/4" then
                            local args = {
                                    [1] = "Elevators",
                                    [2] = "Leave"
                            }
                            RSRF:InvokeServer(unpack(args))
                            print("Someone joined, leaving elevator...")
                            getgenv().repeating = true
                            break
                        elseif sc.Text == "0/4" then
                            print("Found better elevator, leaving...")
                            wait(30)
                            print("Repeating join process - to be sure you joined...")
                            getgenv().repeating = true
                            break
                        end
                        end
                        else
                        local args = {
                            [1] = "Elevators",
                            [2] = "Leave"
                        }
                        RSRF:InvokeServer(unpack(args))
                        print("Map changed while joining, leaving...")
                        getgenv().repeating = true
                        break
                        end
                        end
                    end
                end
            end
            if jc == 0 then
                getgenv().repeating = true
                print("Waiting for map...")
                for _,Elevators in pairs(game:GetService('Workspace').Elevators:GetChildren()) do
                    local args = {
                        [1] = "Elevators",
                        [2] = "Enter",
                        [3] = Elevators
                }
                RSRF:InvokeServer(unpack(args))
                wait()
                local args = {
                    [1] = "Elevators",
                    [2] = "Leave"
            }
            RSRF:InvokeServer(unpack(args))
            wait()
        end
            end
        end
    end
end
end
function scrip:Mode(mode)
if isgame() then
    wait(2)
    RSRF:InvokeServer('Difficulty', 'Vote', mode)
end
end
function scrip:Loadout(t1,t2,t3,t4,t5)
    if not isgame() then
        EquipTroop(t1)
        EquipTroop(t2)
        EquipTroop(t3)
        EquipTroop(t4)
        EquipTroop(t5)
    end
end
function scrip:Place(troop,pos,wave,timem,times)
    spawn(function()
    seconds = conv(times,timem)
    if isgame() then
        repeat wait() until RS.State.Wave.Value == wave
        repeat wait() until RS.State.Timer.Time.Value == seconds
        place(troop,pos)
    end
    end)
end
function scrip:Upgrade(id,wave,timem,times)
    spawn(function()
    seconds = conv(times,timem)
    if isgame() then
    repeat wait() until RS.State.Wave.Value == wave
    repeat wait() until RS.State.Timer.Time.Value == seconds
    upgrade(id)
    end
    end)
end
function scrip:Sell(id,wave,timem,times)
    spawn(function()
    seconds = conv(times,timem)
    if isgame() then
    repeat wait() until RS.State.Wave.Value == wave
    repeat wait() until RS.State.Timer.Time.Value == seconds
    sell(id)
    end
    end)
end
function scrip:Skip(wave,timem,times)
    spawn(function()
    seconds = conv(times,timem)
    if isgame() then
    repeat wait() until RS.State.Wave.Value == wave
    repeat wait() until RS.State.Timer.Time.Value == seconds
    skip()
    end
    end)
end
return scrip