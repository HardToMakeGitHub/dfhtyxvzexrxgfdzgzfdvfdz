--Please don't edit code without Money Maker permission :>
repeat wait() until game:IsLoaded()
loadstring(game:HttpGet("https://raw.githubusercontent.com/banbuskox/dfhtyxvzexrxgfdzgzfdvfdz/main/ikcxujvkdsStrat"))()
getgenv().count = 0
if game.PlaceId == 5591597781 then
game:GetService("Workspace").Towers.ChildAdded:Connect(function(v)
getgenv().count = getgenv().count + 1
end)
end
local scrip = {}
local output = nil
local RS = game:WaitForChild('ReplicatedStorage')
local RSRF = RS:WaitForChild("RemoteFunction")
local RSRE = RS:WaitForChild("RemoteEvent")
function isgame()
    if game.PlaceId == 5591597781 then
        return true
    else
        return false
    end
end
if isgame() then
    spawn(function()
    wait(3)
    for i,v in pairs(game:GetService("Lighting"):GetChildren()) do
        if v.Name ~= "Sky" then
            v:Remove()
        end
    end
    game.Lighting.FogStart = 10000000
    game.Lighting.FogEnd = 10000000
    game.Lighting.Brightness = 1
    local partpos
    if getgenv().CameraSys == true then
    partpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,50,0)
    else
    partpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,20,0)
    end
    local part = Instance.new("Part")
    part.Transparency = 1
    part.Anchored = true
    part.CanCollide = true
    part.Parent = game.Workspace
    part.CFrame = partpos
    if getgenv().CameraSys == true then
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,55,0)
    else
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,25,0)
    end
    local LoggerByBanbus = Instance.new("ScreenGui")
local Main = Instance.new("Frame")
local Glow = Instance.new("ImageLabel")
local Top_Container = Instance.new("Frame")
local Title = Instance.new("TextLabel")
local Scroll = Instance.new("ScrollingFrame")

LoggerByBanbus.Name = "AutoStratsLogger"
LoggerByBanbus.Parent = game:WaitForChild("CoreGui")
LoggerByBanbus.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Main.Name = "Main"
Main.Parent = LoggerByBanbus
Main.BackgroundColor3 = Color3.fromRGB(23, 21, 30)
Main.BorderSizePixel = 0
Main.Position = UDim2.new(0.544935644, 0, 0.355803162, 0)
Main.Size = UDim2.new(0, 500, 0, 400)

Glow.Name = "Glow"
Glow.Parent = Main
Glow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Glow.BackgroundTransparency = 1.000
Glow.BorderSizePixel = 0
Glow.Position = UDim2.new(0, -15, 0, -15)
Glow.Size = UDim2.new(1, 30, 1, 30)
Glow.ZIndex = 0
Glow.Image = "rbxassetid://4996891970"
Glow.ImageColor3 = Color3.fromRGB(15, 15, 15)
Glow.ScaleType = Enum.ScaleType.Slice
Glow.SliceCenter = Rect.new(20, 20, 280, 280)

Top_Container.Name = "Top_Container"
Top_Container.Parent = Main
Top_Container.AnchorPoint = Vector2.new(0.5, 0)
Top_Container.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Top_Container.BackgroundTransparency = 1.000
Top_Container.Position = UDim2.new(0.5, 0, 0, 18)
Top_Container.Size = UDim2.new(1, -40, 0, 20)

Title.Name = "Title"
Title.Parent = Top_Container
Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Title.BackgroundTransparency = 1.000
Title.Position = UDim2.new(0.00764120743, 0, -0.400000006, 0)
Title.Size = UDim2.new(0.981785059, 0, 1.45000005, 0)
Title.Font = Enum.Font.GothamBlack
Title.Text = "AUTOSTRATS LOGGER"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 30.000
Title.TextXAlignment = Enum.TextXAlignment.Left

Scroll.Name = "Scroll"
Scroll.Parent = Main
Scroll.Active = true
Scroll.AnchorPoint = Vector2.new(0.5, 0)
Scroll.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Scroll.BackgroundTransparency = 1.000
Scroll.BorderSizePixel = 0
Scroll.Position = UDim2.new(0.5, 4, 0, 59)
Scroll.Size = UDim2.new(1, -20, 1, -67)
Scroll.BottomImage = "rbxassetid://5234388158"
Scroll.CanvasSize = UDim2.new(200, 0, 100, 0)
Scroll.MidImage = "rbxassetid://5234388158"
Scroll.ScrollBarThickness = 8
Scroll.TopImage = "rbxassetid://5234388158"
Scroll.VerticalScrollBarInset = Enum.ScrollBarInset.Always

local function drag()
	local script = Instance.new('LocalScript', Main)
	script.Name = "Dragify"
	local UIS = game:GetService("UserInputService")
	function dragify(Frame)
	    dragToggle = nil
	    local dragSpeed = 0.25
	    dragInput = nil
	    dragStart = nil
	    local dragPos = nil
	    function updateInput(input)
	        local Delta = input.Position - dragStart
	        local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
	        game:GetService("TweenService"):Create(Frame, TweenInfo.new(0.25), {Position = Position}):Play()
	    end
	    Frame.InputBegan:Connect(function(input)
	        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UIS:GetFocusedTextBox() == nil then
	            dragToggle = true
	            dragStart = input.Position
	            startPos = Frame.Position
	            input.Changed:Connect(function()
	                if input.UserInputState == Enum.UserInputState.End then
	                    dragToggle = false
	                end
	            end)
	        end
	    end)
	    Frame.InputChanged:Connect(function(input)
	        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
	            dragInput = input
	        end
	    end)
	    game:GetService("UserInputService").InputChanged:Connect(function(input)
	        if input == dragInput and dragToggle then
	            updateInput(input)
	        end
	    end)
	end
	dragify(script.Parent)
end
drag()
local function positioning()
	local script = Instance.new('LocalScript', Main)
	script.Name = "Positioning"
	script.Parent:TweenPosition(UDim2.new(0.5, 0, 0.5, 0), "Out", "Quad", 1)
	script.Parent.Draggable = true
end
positioning()
local hours = os.date("*t")["hour"]
local mins = os.date("*t")["min"]
local sec = os.date("*t")["sec"]
local prevOutputPos = -0.0073
function output(msg)
	local colour = Color3.fromRGB(255,255,255)
	local o = Instance.new("TextLabel",Scroll)
 	o.Text = "["..hours..":"..mins..":"..sec.."] "..msg
 	o.Size = UDim2.new(0.005,0,0.001,0)
 	o.Position = UDim2.new(0,0,.007 + prevOutputPos ,0)
 	o.Font = Enum.Font.SourceSansSemibold
 	o.TextColor3 = colour
 	o.TextStrokeTransparency = 0
 	o.BackgroundTransparency = 1
	o.BackgroundColor3 = Color3.new(0,0,0)
 	o.BorderSizePixel = 0
	o.BorderColor3 = Color3.new(0,0,0)
 	o.FontSize = "Size14"
	o.TextXAlignment = Enum.TextXAlignment.Left
 	o.ClipsDescendants = true
	prevOutputPos = prevOutputPos + 0.0005
end
    if getgenv().CameraSys == true then
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 0
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = 0
    while wait() do
        for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
            repeat wait() until v:FindFirstChild("HumanoidRootPart")
            if v.HumanoidRootPart.CFrame.Y > -10 then
                game.Workspace.Camera.CameraSubject = v.HumanoidRootPart
                wait()
                break
            else
                for _,c in pairs(game.Workspace.Towers:GetChildren()) do
                repeat wait() until v:FindFirstChild("HumanoidRootPart")
                game.Workspace.Camera.CameraSubject = v.HumanoidRootPart
                wait()
                break
                end
            end
        end
        end
    end
    end)
end
function place(troop,pos1,pos2,pos3)
    print("Checking if in game (Troop "..troop..")")
    if isgame() then
    print("Placing (Troop "..troop..")")
    local args = {
        [1] = "Troops",
        [2] = "Place",
        [3] = troop,
        [4] = {
            ["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),
            ["Position"] = Vector3.new(pos1,pos2,pos3),
        }
    }
    RSRF:InvokeServer(unpack(args))
    print("Placed (Troop "..troop..")")
    output("Placed (Troop "..troop..")")
    end
end
function sell(troop)
    if isgame() then
    repeat wait() until game.Workspace.Towers:FindFirstChild(tostring(troop))
    local args = {
        [1] = "Troops",
        [2] = "Sell",
        [3] = {
            ["Troop"] = game.Workspace.Towers[tostring(troop)],
        }
    }
    RSRF:InvokeServer(unpack(args))
    end
end
getgenv().Upgrading = false
function upgrade(troop)
    print("Checking if in game (Troop "..troop..")")
    if isgame() then
    spawn(function()
    repeat wait() until game.Workspace.Towers:FindFirstChild(tostring(troop))
    repeat wait() until getgenv().Upgrading == false
    getgenv().Upgrading = true
    local args = {
        [1] = "Troops",
        [2] = "Upgrade",
        [3] = "Set",
        [4] = {
            ["Troop"] = game.Workspace.Towers:WaitForChild(tostring(troop)),
        }
    }
    RSRF:InvokeServer(unpack(args))
    output("Upgraded (Troop "..game.Workspace.Towers[tostring(troop)].Type.Value.." With Number "..tostring(troop)..")")
    getgenv().Upgrading = false
    end)
    end
end
function EquipTroop(troop)
    if not isgame() then
    local args = {
        [1] = "Inventory",
        [2] = "Execute",
        [3] = "Troops",
        [4] = "Add",
        [5] = {
            ["Name"] = troop
        }
    }
    RSRE:FireServer(unpack(args))
    end
end
function skip()
    if isgame() then
    local args = {
        [1] = "Waves",
        [2] = "Skip"
    }
    RSRF:InvokeServer(unpack(args))
    output("Skipped Wave")
    end
end
function conv(times,timem)
    local seconds = times
    local cnv = timem * 60
    local seconds = seconds + cnv
    return seconds
end
function ability(troop,aname)
if isgame() then
repeat wait() until game.Workspace.Towers:FindFirstChild(tostring(troop))
local args = {
    [1] = "Troops",
    [2] = "Abilities",
    [3] = "Activate",
    [4] = {
        ["Troop"] = game.Workspace.Towers[tostring(troop)],
        ["Name"] = aname,
    }
}
RSRF:InvokeServer(unpack(args))
output("Used Ability (Troop "..game.Workspace.Towers[tostring(troop)].Type.Value.." With Number "..tostring(troop).." Ability "..aname..")")
end
end
function scrip:Map(map,antimulti,type)
if not isgame() then
    getgenv().repeating = true
    while wait(1) do
        if getgenv().repeating then
        getgenv().repeating = false
        local jc = 0
        for _,Elevators in pairs(game:GetService('Workspace').Elevators:GetChildren()) do
                        local sc = Elevators.Screen.SurfaceGui.Status.Players
                        local mp = Elevators.State.Map.Title
                        local rq = require(Elevators.Settings).Type
						local plrs = Elevators.State.Players
                        if type == nil then
                            type = "Survival"
                        end
                        if mp.Value == map and rq == type then
                        if (plrs.Value <= 0) then
                            jc = jc + 1
                            print("Join attempt...")
                            getgenv().status = "Joining..."
                            local args = {
                                    [1] = "Elevators",
                                    [2] = "Enter",
                                    [3] = Elevators
                            }
                            RSRF:InvokeServer(unpack(args))
                            print("Joined elavator...")
                            getgenv().status = "Joined"
                        while wait(1) do
                        if mp.Value == map then
                        if antimulti then
                        if (plrs.Value > 1) then
                            local args = {
                                    [1] = "Elevators",
                                    [2] = "Leave"
                            }
                            RSRF:InvokeServer(unpack(args))
                            print("Someone joined, leaving elevator...")
                            getgenv().status = "Someone joined..."
                            getgenv().repeating = true
                            break
                        elseif (plrs.Value == 0) then
                            print("Something gone wrong, leaving...")
                            getgenv().status = "Error"
                            wait(20)
                            print("Repeating join process - to be sure you joined...")
                            getgenv().status = "Repeating joining..."
                            getgenv().repeating = true
                            break
                        end
                        end
                        else
                        local args = {
                            [1] = "Elevators",
                            [2] = "Leave"
                        }
                        RSRF:InvokeServer(unpack(args))
                        print("Map changed while joining, leaving...")
                        getgenv().status = "Map changed..."
                        getgenv().repeating = true
                        break
                        end
                        end
                    end
                end
            end
            if jc == 0 then
                getgenv().repeating = true
                print("Waiting for map...")
                getgenv().status = "Waiting for map..."
            end
        end
    end
end
end
function scrip:Mode(mode)
if isgame() then
    spawn(function()
    for c = 1,10 do
        wait(2)
        RSRF:InvokeServer('Difficulty', 'Vote', mode)
    end
    wait(1)
    output("Selected Mode (Mode "..mode..")")
    end)
end
end
function scrip:Loadout(t1,t2,t3,t4,t5)
    if not isgame() then
        for i,v in pairs(game:GetService("ReplicatedStorage").Assets.Troops:GetChildren()) do
            local args = {
                [1] = "Inventory",
                [2] = "Execute",
                [3] = "Troops",
                [4] = "Remove",
                [5] = {
                    ["Name"] = v.Name
                }
            }
            game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
            wait()
        end
        EquipTroop(t1)
        EquipTroop(t2)
        EquipTroop(t3)
        EquipTroop(t4)
        EquipTroop(t5)
    end
end
function scrip:Place(troop,posx,posy,posz,wave,timem,times,inbetween)
    spawn(function()
    if isgame() then
        print("Waiting for time (Troop "..troop..")")
        repeat wait() until RS.State.Wave.Value == wave
        repeat wait() until RS.State.Timer.Time.Value == conv(times,timem)
        if inbetween then
            wait(1.5)
            print("Placing inbetween (Troop "..troop..")")
            repeat wait() until RS.State.Timer.Time.Value == times
        end
        print("Placing normal (Troop "..troop..")")
        place(troop,posx,posy,posz)
    end
    end)
end
function scrip:Upgrade(id,wave,timem,times,inbetween)
    spawn(function()
    if isgame() then
    repeat wait() until RS.State.Wave.Value == wave
    repeat wait() until RS.State.Timer.Time.Value == conv(times,timem)
    if inbetween then
        wait(1.5)
        repeat wait() until RS.State.Timer.Time.Value == times
    end
    upgrade(id)
    end
    end)
end
function scrip:Sell(id,wave,timem,times,inbetween)
    spawn(function()
    if isgame() then
    repeat wait() until RS.State.Wave.Value == wave
    repeat wait() until RS.State.Timer.Time.Value == conv(times,timem)
    if inbetween then
        wait(1.5)
        repeat wait() until RS.State.Timer.Time.Value == times
    end
    output("Sold (Troop "..game.Workspace.Towers[tostring(id)].Type.Value.." With Number "..tostring(id)..")")
    sell(id)
    end
    end)
end
function scrip:Skip(wave,timem,times)
    spawn(function()
    if isgame() then
    repeat wait() until RS.State.Wave.Value == wave
    repeat wait() until RS.State.Timer.Time.Value == conv(times,timem)
    skip()
    end
    end)
end
function scrip:Ability(id,aname,wave,timem,times)
    spawn(function()
    if isgame() then
    repeat wait() until RS.State.Wave.Value == wave
    repeat wait() until RS.State.Timer.Time.Value == conv(times,timem)
    ability(id,aname)
    end
    end)
end
return scrip
