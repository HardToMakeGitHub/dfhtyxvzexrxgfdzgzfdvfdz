spawn(function()
    local RS = game:WaitForChild('ReplicatedStorage')
    local RSRF = RS:WaitForChild("RemoteFunction")
    local RSRE = RS:WaitForChild("RemoteEvent")
    function EquipTroop(troop)
        if not game.PlaceId == 5591597781 then
        local args = {
            [1] = "Inventory",
            [2] = "Execute",
            [3] = "Troops",
            [4] = "Add",
            [5] = {
                ["Name"] = troop
            }
        }
        game.ReplicatedStorage.RemoteEvent:FireServer(unpack(args))
        end
        end
    function UnEquip()
        for TowerName, Tower in next, game.ReplicatedStorage.RemoteFunction:InvokeServer("Session", "Search", "Inventory.Troops") do
            if (Tower.Equipped) then
                local args = {
                    [1] = "Inventory",
                    [2] = "Execute",
                    [3] = "Troops",
                    [4] = "Remove",
                    [5] = {
                        ["Name"] = TowerName
                    }
                }
                game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
            end;
        end;
    end
    if game.PlaceId == 5591597781 then
    getgenv().map = game:GetService("ReplicatedStorage").State.Map.Value
    else
        spawn(function()
			getgenv().timer = 0
			while wait(1) do
				getgenv().timer = getgenv().timer + 1
			end
		end)
        getgenv().BreakEvery = false
        getgenv().repeating = true
        while wait(1) do
			if getgenv().repeating then
				getgenv().repeating = false
				local jc = 0
				for _, Elevators in pairs(game:GetService('Workspace').Elevators:GetChildren()) do
					local mp = Elevators.State.Map.Title
					local rq = require(Elevators.Settings).Type
					local plrs = Elevators.State.Players
					if getgenv().Maps[mp.Value] ~= nil then
						if (plrs.Value <= 0) then
							jc = jc + 1
							print("Join attempt...")
							getgenv().status = "Joining..."
							local args = {
								[1] = "Elevators",
								[2] = "Enter",
								[3] = Elevators
							}
							RSRF:InvokeServer(unpack(args))
                            UnEquip()
                            for i,v in next, getgenv().Maps[mp.Value] do
                                EquipTroop(v)
                            end
							print("Joined elavator...")
							getgenv().status = "Joined"
							while wait() do
								getgenv().status = "Joined ("..Elevators.State.Timer.Value.."s)"
								if Elevators.State.Timer.Value == 0 then
                                    wait(1)
                                    if Elevators.State.Timer.Value == 0 then
										getgenv().status = "Teleporting..."
										wait(60)
										getgenv().status = "Teleport failed!"
                                        local args = {
                                            [1] = "Elevators",
                                            [2] = "Leave"
                                        }
                                        RSRF:InvokeServer(unpack(args))
                                        UnEquip()
                                    end
                                end
								if getgenv().Maps[mp.Value] ~= nil then
									if antimulti then
										if (plrs.Value > 1) then
											local args = {
												[1] = "Elevators",
												[2] = "Leave"
											}
											RSRF:InvokeServer(unpack(args))
											print("Someone joined, leaving elevator...")
											getgenv().status = "Someone joined..."
											getgenv().repeating = true
                                            UnEquip()
											break
										elseif (plrs.Value == 0) then
											wait(1)
											if (plrs.Value == 0) then
											print("Error")
											getgenv().status = "Error occured, check dev con"
											print("Error occured, please report this message to #bugs on Money Maker Development discord server, remember about form!")
											local args = {
												[1] = "Elevators",
												[2] = "Leave"
											}
											RSRF:InvokeServer(unpack(args))
											getgenv().repeating = true
                                            UnEquip()
											break
											end
										end
									end
								else
									local args = {
										[1] = "Elevators",
										[2] = "Leave"
									}
									RSRF:InvokeServer(unpack(args))
									print("Map changed while joining, leaving...")
									getgenv().status = "Map changed..."
									getgenv().repeating = true
                                    UnEquip()
									break
								end
							end
						end
					end
				end
				if jc == 0 then
					getgenv().repeating = true
					print("Waiting for map...")
					getgenv().status = "Waiting for map..."
					if getgenv().timer >= 30 then
					getgenv().status = "Force changing maps..."
					getgenv().timer = 0
					for i, v in pairs(game:GetService('Workspace').Elevators:GetChildren()) do
						local rq = require(v.Settings).Type
						local plrs = v.State.Players
						if rq == "Survival" and plrs.Value <= 0 then
							local args = {
								[1] = "Elevators",
								[2] = "Enter",
								[3] = v
							}
							RSRF:InvokeServer(unpack(args))
							wait(1)
							local args = {
								[1] = "Elevators",
								[2] = "Leave"
							}
							RSRF:InvokeServer(unpack(args))
						end
					end
					wait(0.6)
					local args = {
						[1] = "Elevators",
						[2] = "Leave"
					}
					RSRF:InvokeServer(unpack(args))
					wait(1)
				end
			end
		end
    end
    end
    end)